#!/bin/sh
#
# description: Starts ans stops Transmission daemon
#
bin=/usr/local/etc/mos/bin
mos=/usr/local/etc/mos/trans
home=$mos/home
#
# -------------------------------------
stateTrans()
{
	ps | grep -q '[t]ransmission-daemon'
}
#
# -------------------------------------
getParam() {
  cat $home/settings.json | sed -n 's/^.*"'$1'" *: *"*\([^ ,"]*\).*$/\1/p'
}
#
# -------------------------------------
start() {
	stateTrans && exit 0

	sd=''
	for d in /tmp/ramfs/volumes/* ; do
		[ -L "$d" ] || continue
		p=$( $bin/realpath $d )
		m=$( cat /proc/mounts | grep " $p " | cut -d' ' -f 3 )
		[ -z "$m" ] && continue

		sd="$d"
		if [ "$m" == ext3 -o "$m" == ext2 ] ; then
			limit_down=2048
			limit_up=512
			limit_file=100
			limit_peer=100
			limit_peer_t=30
			prealloc=0
		else
			limit_down=1024
			limit_up=100
			limit_file=30
			limit_peer=50
			limit_peer_t=50
			prealloc=0
		fi
		break
	done
	[ -z "$sd" ] && exit 1

	# check no_trans
	[ -e $sd/no_trans ] && exit 1

	#remount rw torrent drive
	mount -o remount,rw $p

	dl_dir=$sd/torrent
	ic_dir=$dl_dir/.incomplete
	wch_dir=/tmp/watch
	home=$dl_dir/.home

	[ ! -d $home ] && mkdir -p $home

	# previous revisions config and torrents
	if [ -d $mos/home ] ; then
		cp -a $mos/home/* $home/
		rm -Rf $mos/home
	fi

	# unsaved config
	if [ -f $mos/settings.json ] ; then
		cp -a  $mos/settings.json $home/settings.json
		rm -f  $mos/settings.json
	fi

	if [ -f $home/settings.json ] ; then
		# use config
		i=$( getParam download-dir )
		[ -n "$i" ] && dl_dir=$i
		is_ic=$( getParam incomplete-dir-enabled )
		i=$( getParam incomplete-dir )
		[ -n "$i" ] && ic_dir=$i
		i=$( getParam watch-dir )
		[ -n "$i" ] && wch_dir=$i
	else
		# create config
		echo '{
	"alt-speed-down": 50,
	"alt-speed-enabled": false,
	"alt-speed-time-begin": 540,
	"alt-speed-time-day": 127,
	"alt-speed-time-enabled": false,
	"alt-speed-time-end": 1020,
	"alt-speed-up": 50,
	"bind-address-ipv4": "0.0.0.0",
	"bind-address-ipv6": "::",
	"blocklist-enabled": false,
	"dht-enabled": false,
	"download-dir": "'$dl_dir'",
	"encryption": 0,
	"incomplete-dir": "'$ic_dir'",
	"incomplete-dir-enabled": false,
	"lazy-bitfield-enabled": true,
	"message-level": 2,
	"open-file-limit": '$limit_file',
	"peer-limit-global": '$limit_peer',
	"peer-limit-per-torrent": '$limit_peer_t',
	"peer-port": 51413,
	"peer-port-random-high": 65535,
	"peer-port-random-low": 49152,
	"peer-port-random-on-start": false,
	"peer-socket-tos": 0,
	"pex-enabled": true,
	"port-forwarding-enabled": true,
	"preallocation": '$prealloc',
	"proxy": "",
	"proxy-auth-enabled": false,
	"proxy-auth-password": "",
	"proxy-auth-username": "",
	"proxy-enabled": false,
	"proxy-port": 80,
	"proxy-type": 0,
	"ratio-limit": 2.0000,
	"ratio-limit-enabled": false,
	"rename-partial-files": false,
	"rpc-authentication-required": true,
	"rpc-bind-address": "0.0.0.0",
	"rpc-enabled": true,
	"rpc-password": "1234",
	"rpc-port": 9091,
	"rpc-username": "torrent",
	"rpc-whitelist": "*.*.*.*",
	"rpc-whitelist-enabled": true,
	"script-torrent-done-enabled": false, 
	"script-torrent-done-filename": "",
	"speed-limit-down": '$limit_down',
	"speed-limit-down-enabled": true,
	"speed-limit-up": '$limit_up',
	"speed-limit-up-enabled": true,
	"start-added-torrents": true,
	"trash-original-torrent-files": false,
	"umask": 18, 
	"upload-slots-per-torrent": 30,
	"watch-dir": "'$wch_dir'",
	"watch-dir-enabled": true,
	"cache-size-mb": 8
}' > $home/settings.json
	fi

	[ ! -d $dl_dir ] && mkdir -p $dl_dir
	[ "$is_ic" == 'true' ] && [ ! -d $ic_dir ] && mkdir -p $ic_dir
	
	if [ ! -d $wch_dir ]; then
		mkdir -p $wch_dir
	else
		rm -f $wch_dir/*.torrent
	fi
	echo $wch_dir > $mos/watch.dir

	echo "Starting Transmission..."

	# copying files
	cgi=/tmp/www/cgi-bin
	[ -d /sbin/www ] && cgi=/sbin/www/cgi-bin
	[ ! -d $cgi ] && mkdir -p $cgi
	cp -af $mos/torrents_xml.cgi $cgi/

	# make symlink to transmission home
	[ -e /tmp/trans_home ] && rm -f /tmp/trans_home
	ln -s $home/ /tmp/trans_home

	# global variables
	export TRANSMISSION_HOME=$home
	export TRANSMISSION_WEB_HOME=$mos/web
	export USERNAME=root

	#prepare paths
	mkdir -p /var/run
	mkdir -p /var/log
	mkdir -p /var/tmp
	chmod 777 /var/tmp

	# sysctl patch
	if ! sysctl 2>/dev/null ; then
		[ -f $bin/busybox.1.18.5 ] && ln -s $bin/busybox.1.18.5 $bin/sysctl
	fi
	#
	if sysctl 2>/dev/null ; then
		sysctl -w net.core.rmem_max=2097152 >/dev/null
		sysctl -w net.core.wmem_max=524288 >/dev/null
	fi

	nice -n 19 $mos/transmission-daemon -c $wch_dir -g $home -p 9091 -t
}
#
# -------------------------------------
stop()
{
	stateTrans || exit 1

	echo "Stopping Transmission..."

	killall transmission-daemon 2>/dev/null
	i=60
	while [ $i -ne 0 ] ; do
		[ -z "$( ps | grep '[t]ransmission-daemon' )" ] && break
		sleep 1
		let i-=1
	done

	rm -f $mos/watch.dir

	# remove cgi
	cgi=/tmp/www/cgi-bin
	[ -d /sbin/www ] && cgi=/sbin/www/cgi-bin
	rm -f $cgi/torrents_xml.cgi
}

case "$1" in
  start)
	start
	;;
  stop)
	stop
	;;
  status)
	if stateTrans
	then
		echo "Transmission running"
	else
		echo "Transmission stopped"
	fi
	;;
  copy)
	[ -f /tmp/trans_home/settings.json ] && \
	cp -a /tmp/trans_home/settings.json $mos/settings.json
	;;

  save)
	[ -f /tmp/trans_home/settings.json ] && \
	[ -f $mos/settings.json ] && \
	cp -a  $mos/settings.json /tmp/trans_home/settings.json
	;;
  enable | disable)
	;;
  *)
	echo "Usage: $0 {start|stop|status|enable|disable}"
esac

exit $?
