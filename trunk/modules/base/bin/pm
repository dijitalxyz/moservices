#!/bin/sh
# ---------------------------------------------------------
# Package manager moServices3
#
etc=/usr/local/etc
mos=$etc/mos
pm=$mos/etc/pm
tmp=/tmp

localrepo=''
repository="http://www.moservices.org/mos3"
enviroment=''

# read config
if [ -f $mos/etc/pm.conf ] ; then
	. $mos/etc/pm.conf
else
	echo 'repository="'$repository'"' > $mos/etc/pm.conf
fi

# other settings
[ -f $tmp/install.conf ] && . $tmp/install.conf
[ -f $tmp/repo ] && repository="$( head -n 1 $tmp/repo )"

# get enviroment
if [ -z "$enviroment" ] ; then
	s="$( uname -r )"
	if [ "$s" = '2.6.12.6-VENUS' ] ; then
		enviroment='12'
	elif [ "$s" = '2.6.34-VENUS' ] ; then
		enviroment='34'
	else
		echo "Env error: Linux $s is not supported"
		exit 1
	fi
	echo "Env: Detected $s core"

	if ls /lib/ | grep -q 'ld-uClibc-0\.9\.28' ; then
		echo 'Env: Detected uClibc 0.9.28'
		enviroment=$enviroment'28'
	elif ls /lib/ | grep -q 'ld-uClibc-0\.9\.30' ; then
		echo 'Env: Detected uClibc 0.9.30'
		enviroment=$enviroment'30'
	else
		echo "Env error: Didn't detect supported uClibc"
		exit 1
	fi
	echo "enviroment=$enviroment" >> $mos/etc/pm.conf
fi

#--------------------------------------
loadFile()
{
	[ -n "$2" ] && tmp=$2

	# download
	if [ ! -f $tmp/$1.tar.bz2 ]; then
		if [ -n "$localrepo" ] ; then
			if [ ! -e $localrepo/$1.tar.bz2 ] ; then
				echo "Load error: File $localrepo/$1.tar.bz2 not found"
				return 1
			fi
			cp -a $localrepo/$1.tar.bz2 $tmp/
		else
			nice -n 10 wget -T 5 -t 3 $repository/$1.tar.bz2 -O $tmp/$1.tar.bz2
			if [ $? -ne 0 ] ; then
				echo "Load error: Unable to download $repository/$1.tar.bz2"
				rm -f $tmp/$1.tar.bz2
				return 1
			fi
		fi
	fi
	# check
	tar -tjf $tmp/$1.tar.bz2 >/dev/null 2>&1
	if [ $? -ne 0 ] ; then
		echo "Load error: Archive $tmp/$1.tar.bz2 is corrupt"
		rm -f $tmp/$1.tar.bz2
		return 1
	fi
	return 0
}

#--------------------------------------
extractFile()
{
	# untar
	tar -xjf $tmp/$1.tar.bz2 -C $mos/
	if [ $? -ne 0 ] ; then
		echo "Extract error: $tmp/$1.tar.bz2 extract error"
		rm -f $tmp/$1.tar.bz2
		return 1
	fi
	rm -f $tmp/$1.tar.bz2
	return 0
}


#--------------------------------------
# $1 - package name
runPatches()
{
	for i in $mos/$1*.patch ; do
		[ -f $i ] || continue
		[ -x $i ] && $i
		rm -f $i
	done
}

# -------------------------------------
getFreeMem()
{
	s=$( echo $( df | grep -E ' '$mos'$' ) | cut -d' ' -f4 )
	[ -z "$s" ] && s=$( echo $( df | grep -E ' '$etc'$' ) | cut -d' ' -f4 )
	[ -z "$s" ] && s=$( echo $( df | grep -E ' /data$'  ) | cut -d' ' -f4 )
	[ -z "$s" ] && s=0
	echo $s
}

#--------------------------------------
# $1 - list file
# $2 - package name
# $3 - parameter name
#
getParameterFromList()
{
	sed -nr '/\['$2'\]/{:a;n;/\[.*\]/q;s/^[ 	]*'$3'[ 	]*=[ 	]*"?([^"]*).*$/\1/p;t;ba;}' $1
}

#--------------------------------------
# $1 - list file
# $2 - package name
#
getPackageFromList()
{
	sed -n '/\['$2'\]/{p;:a;n;/^$/ba;/\[.*\]/q;p;ba;}' $1
}

#--------------------------------------
# $1 - list file
# $2 - package name
#
removePackageFromList()
{
	sed -ni '/\['$2'\]/{:a;n;/\[.*\]/bb;ba;:b;};p' $1
}

#--------------------------------------
updateList()
{
	echo "Update repository list..."

	loadFile packages || return 1
	extractFile packages || return 1

	if [ ! -f $pm/installed ] ; then
		getPackageFromList $pm/packages base > $pm/installed
		echo >> $pm/installed
	fi

	runPatches packages

	return 0
}

retPkg=''

#--------------------------------------
# $1 - package name
#
checkPackageInList()
{
	if [ ! -f $pm/packages ] ; then
		updateList || return 1
	fi
	if grep -q "\[$1\]" $pm/packages ; then
		retPkg=$1
		return 0
	fi
	if grep -q "\[$1_$enviroment\]" $pm/packages ; then
		retPkg=$1_$enviroment
		return 0
	fi
	echo "Check error: Package $1 not found in list"
	return 1
}

#--------------------------------------
# $1 - package name
#
checkPackageInstalled()
{
	if grep -q "\[$1\]" $pm/installed ; then
		retPkg=$1
		return 0
	fi
	if grep -q "\[$1_$enviroment\]" $pm/installed ; then
		retPkg=$1_$enviroment
		return 0
	fi
	return 1
}

#--------------------------------------
getPackageSize()
{
local pkg
local s
local h
local p
	pkg="$1"
	checkPackageInList $1 > /dev/null
	if [ $? -ne 0 ] ; then
		echo '0'
		return 1
	fi
	pkg=$retPkg

	s=$( getParameterFromList $pm/packages $pkg size )

	# required packages
	h="$( getParameterFromList $pm/packages $pkg require )"
	if [ -n "$h" ] ; then
		for p in $h ; do
			checkPackageInstalled $p || let s=s+$( getPackageSize $p )
		done
	fi

	echo $s
}

#--------------------------------------
goesToNewVersion()
{
	if [ -f $pm/files/$1 ] ; then
		grep -Eq 'files *=' $mos/$1.package || echo '	files = "'$( echo $( cat $pm/files/$1 ) )'"' >> $mos/$1.package
		rm -f $pm/files/$1
		[ -z "$( ls $pm/files )" ] && rm -Rf $pm/files
	fi

	if [ -f $pm/required/$1 ] ; then
		grep -q 'require *=' $mos/$1.package || echo '	require = "'$( echo $( cat $pm/required/$1 ) )'"' >> $mos/$1.package
		rm -f $pm/required/$1
		[ -z "$( ls $pm/required )" ] && rm -Rf $pm/required
	fi
}

#--------------------------------------
installPackage()
{
local pkg
local h
local p

	pkg=$1

	if [ "$2" != 'alone' ] ; then
		checkPackageInList $1 || return 1
		pkg=$retPkg
	fi

	echo "Install package $pkg..."

	if checkPackageInstalled $pkg ; then
		echo "Install notice: Package $pkg already installed"
	else
		if [ "$2" != 'alone' ] ; then
			# check enviroment
			h="$( getParameterFromList $pm/packages $pkg env )"
			if [ -n "$h" ] ; then
				if [ $h -ne $enviroment ] ; then
					echo "Install error: Package $pkg not supported by enviroment"
					return 1
				fi
			fi
			# check for installable
			h="$( getParameterFromList $pm/packages $pkg check )"
			if [ -n "$h" ] ; then
				h="$pm/check/$h"
			else
				h="$pm/check/$pkg"
			fi
			v=$( echo $h | cut -d' ' -f1 )
			if [ -f $v ] && [ -x $v ] ; then
				$h $pkg
				ret=$?
				if [ $ret -eq 1 ] ; then
					echo "Install error: Package $pkg is not installable"
					return 1
				elif [ $ret -eq 2 ] ; then
					echo "Install notise: Package $pkg is embeded"
					echo -e "[$pkg]\n\trevision = emb\n" >> $pm/installed
					return 0
				fi
			fi
			# check memory
			h=$( getFreeMem )
			v=$( getPackageSize $pkg )
			if [ $v -gt $h ] ; then
				echo "  No enough memory for $pkg"
				return 1
			fi
		fi
		#
		loadFile $pkg || return 1
		extractFile $pkg || return 1

		goesToNewVersion $pkg

		cat $mos/$pkg.package >> $pm/installed
		echo >> $pm/installed
		rm -f $mos/$pkg.package
	fi
	# required packages
	h="$( getParameterFromList $pm/installed $pkg require )"
	if [ -n "$h" ] ; then

		for p in $h ; do
			if [ "$2" != 'alone' ] ; then
				checkPackageInList $p || continue
				p=$retPkg
			fi
			installPackage $p $2 || continue
			p=$retPkg

			# uses
			touch $pm/uses
			if grep -Eq '^'$p'=' $pm/uses ; then
				if ! grep -Eq '^'$p'=".*'$pkg'.*"$' $pm/uses ; then
					sed -ri 's/^('$p')="(.*)"$/\1="\2 '$pkg'"/' $pm/uses
				fi
			else
				echo "$p=\"$pkg\"" >> $pm/uses
			fi
		done
	fi

	runPatches $pkg

	retPkg=$pkg
	return 0
}

#--------------------------------------
removePackage()
{
local pkg
local h
local p

	pkg=$1

	checkPackageInstalled $1
	if [ $? -ne 0 ] ; then
		echo "Remove error: Package $1 not installed"
		return 1
	fi
	pkg=$retPkg

	echo "Remove package $pkg..."

	if grep -Eq '^'$pkg'=' $pm/uses ; then
		echo "Remove error: Package $pkg used by other packages"
		return 1
	fi

	# required packages
	h="$( getParameterFromList $pm/installed $pkg require )"
	if [ -n "$h" ] ; then

		for p in $h ; do

			checkPackageInstalled $p || continue
			p=$retPkg

			# uses
			if grep -Eq '^'$p'=' $pm/uses ; then

				sed -ri 's/^'$p'="(.*) *'$pkg' *(.*)"$/'$p'="\1\2"/' $pm/uses
				sed -ri 's/ "/"/' $pm/uses
				sed -ri '/^'$p'=""$/d' $pm/uses

				grep -Eq '^'$p'=' $pm/uses || removePackage $p $2
			fi
		done
	fi

	# remove files
	h="$( getParameterFromList $pm/installed $pkg files )"
	if [ -n "$h" ] ; then
		for p in $h ; do
			rm -Rf $mos/$p
		done;
	fi
	removePackageFromList $pm/installed $pkg
}

#--------------------------------------
updatePackage()
{
local pkg
local req
local h
local p

	pkg="$1"

	checkPackageInstalled $1
	if [ $? -ne 0 ] ; then
		echo "Update error: Package $1 not installed"
		return 1
	fi
	pkg=$retPkg

	irev=$( getParameterFromList $pm/installed $pkg revision )
	if [ "$irev" == 'emb' ] ; then
		echo "Update notice: Package $pkg embeded"
		return 0
	fi

	if [ "$2" != 'now' ] ; then
		arev=$( getParameterFromList $pm/packages $pkg revision )
		if [ -z "$arev" ] ; then
			echo "Update notice: $pkg is alone"
			return 0
		fi
		if [ $irev -eq $arev ] ; then
			echo "Update notice: $pkg nothing for update"
			return 0
		fi
	fi

	echo "Update package $pkg..."

	# check memory
	h=$( getFreeMem )
	p=$( getParameterFromList $pm/installed $pkg size )
	v=$( getParameterFromList $pm/packages $pkg size )
	[ -z "$v" ] && v=p
	let h=h+p-v
	if [ $h -le 0 ] ; then
		echo "Update error: No enough memory for update $pkg"
		return 1
	fi

	# load package
	loadFile $pkg || return 1

	# remove old requires from uses
	req="$( getParameterFromList $pm/installed $pkg require )"
	if [ -n "$req" ] ; then

		for p in $req ; do

			checkPackageInstalled $p || continue
			p=$retPkg

			# uses
			if grep -Eq '^'$p'=' $pm/uses ; then

				sed -ri 's/^'$p'="(.*) *'$pkg' *(.*)"$/'$p'="\1\2"/' $pm/uses
				sed -ri 's/ "/"/' $pm/uses
				sed -ri '/^'$p'=""$/d' $pm/uses
			fi
		done
	fi

	# remove files
	h="$( getParameterFromList $pm/installed $pkg files )"
	if [ -n "$h" ] ; then
		for p in $h ; do
			rm -Rf $mos/$p
		done;
	fi
	removePackageFromList $pm/installed $pkg

	# extract package
	extractFile  $pkg || return 1

	goesToNewVersion $pkg

	cat $mos/$pkg.package >> $pm/installed
	echo >> $pm/installed
	rm -f $mos/$pkg.package

	# required packages
	h="$( getParameterFromList $pm/installed $pkg require )"
	if [ -n "$h" ] ; then

		for p in $h ; do

			checkPackageInstalled $p
			if [ $? -ne 0 ] ; then
				installPackage $p $2 || continue
				p=$retPkg
			else
				updatePackage $p $2 || continue
				p=$retPkg
			fi

			# uses
			touch $pm/uses
			if grep -Eq '^'$p'=' $pm/uses ; then

				if ! grep -Eq '^'$p'=".*'$pkg'.*"$' $pm/uses ; then
					sed -ri 's/^('$p')="(.*)"$/\1="\2 '$pkg'"/' $pm/uses
				fi
			else
				echo "$p=\"$pkg\"" >> $pm/uses
			fi
		done
	fi

	# check old requires
	if [ -n "$req" ] ; then

		for p in $req ; do

			checkPackageInstalled $p || continue
			p=$retPkg

			# uses
			grep -Eq '^'$p'=' $pm/uses || removePackage $p $2
		done
	fi

	runPatches $pkg

	retPkg=$pkg
	return 0
}

# -------------------------------------
# $1 package name
# $2 parameter name
# $3 path name
#
mkFileFromParameter()
{
local i
local s
	s="$( getParameterFromList $pm/installed $1 $2 )"
	if [ -n "$s" ] ; then
		mkdir -p $pm/$3
		for i in $s ; do
			echo $i >> $pm/$3/$1
		done
	fi
}

# -------------------------------------
makePackage() {

	pkg="$1"

	checkPackageInstalled $1
	if [ $? -ne 0 ] ; then
		echo "Make error: Package $1 not installed"
		return 1
	fi
	pkg=$retPkg

	h="$( getParameterFromList $pm/installed $pkg files )"
	if [ -n "$h" ] ; then
		echo "Making package $pkg..."
		[ -f $pm/check/$pkg ]  && h=$h" etc/pm/check/$pkg"

		# files, require for old version
		mkFileFromParameter $pkg files files
		[ -f $pm/files/$pkg ] && h=$h" etc/pm/files/$pkg"
		mkFileFromParameter $pkg require required
		[ -f $pm/required/$pkg ] && h=$h" etc/pm/required/$pkg"

		# about
		for a in $mos/etc/about/$pkg.* ; do
			[ -f $a ] || continue
			h="$h etc/about/$( basename $a )"
		done

		p=$PWD
		cd $mos
		s=$( du -sc $h | tail -n1 | cut -f1 )
		cd $p

		getPackageFromList $pm/installed $pkg > $mos/$pkg.package

		sed -i '/size[ 	]*=/d' $mos/$pkg.package
		echo '	size = '$s >> $mos/$pkg.package

		h=$h" $pkg.package"

		tar cjf $2/$pkg.tar.bz2 -C $mos/ $h

		rm -f $mos/$pkg.package

		# remove files, required
		rm -f $pm/files/$pkg
		rm -f $pm/required/$pkg
		[ -z "$( ls $pm/files 2>/dev/null )" ] && rm -Rf $pm/files
		[ -z "$( ls $pm/required 2>/dev/null )" ] && rm -Rf $pm/required
	else
		echo "Make error: Package $1 has wrong structure"
	fi
}

#--------------------------------------
# main
#--------------------------------------

case "$1" in
  install)
	installPackage $2 $3
	;;
  remove)
	removePackage $2
	;;
  update)
	updatePackage $2 $3
	;;
  updatelist)
	updateList
	;;
  make)
	m=''
	[ $# -ge 2 ] && m=$2

	d=/tmp
	[ $# -ge 3 ] && d=$3

	if [ "$m" = "full" ] ; then

		echo "Making full..."
		cd $mos
		tar cjf $d/mos_full.tar.bz2 *

	else
		[ -n "$m" ] && makePackage $m $d
	fi
	;;
  get)
	loadFile $2 $3
	;;
  show)
	case "$2" in
	  repository)
		echo $repository
		;;
	  enviroment)
		echo $enviroment
		;;
	  freememory)
		getFreeMem
		;;
	  size)
		getPackageSize $3
		;;
	  installed)
		getPackageFromList $pm/installed $3
		;;
	  package)
		getPackageFromList $pm/packages $3
		;;
	esac
	;;

  list)
	case "$2" in
	  installed)
		sed -nr 's/\[(.*)\]/\1/p' $pm/installed
		;;
	  *)
		sed -nr 's/\[(.*)\]/\1/p' $pm/packages
		;;
	esac
	;;

  *)
	echo "moServices Package Manager rev10 (http://www.moservices.org)
Usage: pm <action> ...
Avaiable:
	install <package>	[alone]
	remove	<package>
	update	<package>	[now]
	make	<package>|full	[<destination_path>] (default /tmp)
	get 	<package>	[<destination_path>] (default /tmp)
	updatelist
	show
		repository
		enviroment
		freememory
		size	  <package>
		installed <package>
		package	  <package>
	list
		installed
		packages"
	;;
esac

exit $?
